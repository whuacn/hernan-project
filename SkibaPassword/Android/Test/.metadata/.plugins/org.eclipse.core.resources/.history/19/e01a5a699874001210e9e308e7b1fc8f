package com.skiba.password;

import java.util.ArrayList;

public class clsGenerate {

	String b64pad  = "";
	int chrsz   = 8;
	
	public String generate(String secretpassword,String sitename,int pswlength) {
		String pwd = "";
		String error = "";
	    if (sitename.length() == 0)
	        error = error + " sitename";
	    if (secretpassword.length() == 0)
	        error = error + " secretpassword";
	    
	    if (error.length() == 0) {
	    	String input = secretpassword + ':' + sitename.toLowerCase();
	        pwd = binb2b64(core_sha1(str2binb(input), input.length() * chrsz));
	        pwd = pwd.substring(0, pswlength);
	        pwd = ensurenumberandletter(pwd);
	    }
	    return pwd;
	}
	
	private ArrayList core_sha1(x, len)
	{
		x[len >> 5] |= 0x80 << (24 - len % 32);
		x[((len + 64 >> 9) << 4) + 15] = len;

		var w = Array(80);
		var a =  1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d =  271733878;
		var e = -1009589776;

		for(int i = 0; i < x.length(); i += 16)
		{
		var olda = a;
		var oldb = b;
		var oldc = c;
		var oldd = d;
		var olde = e;

		for(int j = 0; j < 80; j++)
		{
			if(j < 16) w[j] = x[i + j];
			else w[j] = rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);
			var t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)),
			                safe_add(safe_add(e, w[j]), sha1_kt(j)));
			e = d;
			d = c;
			c = rol(b, 30);
			b = a;
			a = t;
		}

		a = safe_add(a, olda);
		b = safe_add(b, oldb);
		c = safe_add(c, oldc);
		d = safe_add(d, oldd);
		e = safe_add(e, olde);
		}
		return ArrayList(a, b, c, d, e);

	}	
	
	private int sha1_ft(int t, int b, int c, int d)
	{
		if(t < 20) return (b & c) | ((~b) & d);
		if(t < 40) return b ^ c ^ d;
		if(t < 60) return (b & c) | (b & d) | (c & d);
		return b ^ c ^ d;
	}
	
	private int  sha1_kt(int t)
	{
		return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
			    (t < 60) ? -1894007588 : -899497514;
	}

	private int  safe_add(int x, int y)
	{
		int  lsw = (x & 0xFFFF) + (y & 0xFFFF);
		int  msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return (msw << 16) | (lsw & 0xFFFF);
	}	
	
	private int rol(int num, int cnt)
	{
		return (num << cnt) | (num >>> (32 - cnt));
	}
	
	private ArrayList str2binb(String str)
	{
		ArrayList bin = new ArrayList();
		int mask = (1 << chrsz) - 1;
		for(int i = 0; i < str.length() * chrsz; i += chrsz)
		bin[i>>5] |= (str.charAt(i / chrsz) & mask) << (24 - i%32);
		return bin;
	}
	
	private String binb2b64(ArrayList binarray)
	{
		String tab = "ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz123456789?!#@&$";
		String str = "";
		for(int i = 0; i < binarray.size() * 4; i += 3)
		{
		int triplet = (((binarray[i   >> 2] >> 8 * (3 -  i   %4)) & 0xFF) << 16)
			        | (((binarray[i+1 >> 2] >> 8 * (3 - (i+1)%4)) & 0xFF) << 8 )
			        |  ((binarray[i+2 >> 2] >> 8 * (3 - (i+2)%4)) & 0xFF);
		for(int j = 0; j < 4; j++)
		{
			if(i * 8 + j * 6 > binarray.size() * 32) str += b64pad;
			else str += tab.charAt((triplet >> 6*(3-j)) & 0x3F);
		}
		}
		return str;
	}
	
}
